import groovy.sql.Sql
import org.apache.commons.dbcp.BasicDataSource

import static groovy.io.FileType.*

apply plugin: 'spring-boot'
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'cobertura'

build {
    dependsOn tasks.check
    dependsOn tasks.coberturaCheck
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'mysql:mysql-connector-java:5.1.3'
        classpath 'commons-dbcp:commons-dbcp:1.2.2'
    }
}

ext {
    publicDir = 'src/main/resources/public'
}

repositories {
    mavenCentral()
}

jar {
    baseName = 'backend'
    version = '0.0.1-SNAPSHOT'
}

sourceSets {
    integTest {
        java {
            srcDir 'src/integTest/java'
        }
        resources {
            srcDir 'src/integTest/resources'
        }
    }
}

dependencies {
    compile(
            "org.springframework.boot:spring-boot-starter-web:1.2.3.RELEASE",
            'com.google.guava:guava:18.0',
            'com.jayway.restassured:rest-assured:2.4.1',
            'org.springframework.boot:spring-boot-starter-security',
            'net.sf.ehcache:ehcache-core:2.6.9',
            'org.json:json:20140107'
    )

    testCompile(
            "org.springframework.boot:spring-boot-starter-test:1.2.3.RELEASE",
            'com.jayway.jsonpath:json-path-assert:2.0.0'
    )

    integTestCompile sourceSets.main.output
    integTestCompile configurations.testCompile
}

cobertura {
    coverageFormats = ['html']
    coverageEncoding = 'UTF-8'
    coverageExcludes = ['.*com.thoughtworks.fam.configuration.*']
    coverageIgnoreMethodAnnotations = []
    coverageCheckBranchRate = 80
    coverageCheckLineRate = 80
    coverageCheckPackageBranchRate = 80
    coverageCheckPackageLineRate = 80
    coverageCheckTotalBranchRate = 80
    coverageCheckTotalLineRate = 80
    coverageIgnoreTrivial = true
    //TODO temp disable test coverage
    coverageCheckHaltOnFailure = false
}

task cleanPublic << {
    delete publicDir
}

clean.dependsOn cleanPublic

task copyPublic(type: Copy, dependsOn: [':front-end:build', cleanPublic]) {
    from project(':front-end').file('public')
    into publicDir
}

task copyPublicWithoutBuild(type: Copy, dependsOn: cleanPublic) {
    from project(':front-end').file('public')
    into publicDir
}

task integTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}

check.dependsOn integTest
checkstyle {
    configFile = new File("checkstyle.xml")
}

task createDB {
    doLast {
        def sqlInstance = createSqlInstance()
        createDatabase(sqlInstance, 'dev1')
        accessAllSqlFilesUnder('back-end/sqlFiles/', sqlInstance)
    }
}

def accessAllSqlFilesUnder(String directory, Sql sqlInstance) {
    new File(directory).traverse(
            type: FILES,
            nameFilter: { it.endsWith('.sql') },
            excludeFilter: { it.isDirectory() },
            visit: {
                executeSqlFile sqlInstance, it.path
            }
    )
}

def createDatabase(Sql sqlInstance, String databaseName) {
    try {
        sqlInstance.execute "DROP DATABASE IF EXISTS $databaseName".toString()
    } catch (ex) {
        println ex.message
    }
    sqlInstance.execute "CREATE DATABASE $databaseName".toString()
    sqlInstance.execute "USE $databaseName".toString()
}

def createSqlInstance() {
    def dataSource = new BasicDataSource()
    dataSource.with {
        driverClassName = 'com.mysql.jdbc.Driver'
        username = 'tw-local'
        password = 'local123'
        url = 'jdbc:mysql://localhost:3306'
    }
    new Sql(dataSource)
}

def executeSqlFile(Sql sqlInstance, String filePath) {
    readSqlFile(filePath).each { String sqlStatement ->
        println sqlStatement
        sqlInstance.execute sqlStatement
        println 'Execution Finished'
    }
}

def readSqlFile(String filePath) {
    List<String> sqlStatements = []
    String currentSqlStatement = ''

    new File(filePath).eachLine { String line ->
        if (!isEmptyLineOrComment(line)) {
            if (line.contains(';')) {
                currentSqlStatement += line.substring(0, line.lastIndexOf(';') + 1)
                sqlStatements << currentSqlStatement
                currentSqlStatement = line.substring(line.lastIndexOf(';') + 1)
            } else {
                currentSqlStatement += line
            }
        }
    }

    if (!currentSqlStatement.isEmpty()) {
        sqlStatements << currentSqlStatement
    }

    sqlStatements
}

def isEmptyLineOrComment(String line) {
    line== null || line.isEmpty() || line.trim().startsWith('--')
}
